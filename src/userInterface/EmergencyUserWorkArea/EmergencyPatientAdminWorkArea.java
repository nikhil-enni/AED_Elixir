/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.EmergencyUserWorkArea;

import business.EcoSystem;

import business.enterprise.Enterprise;
import business.medicalEmployment.Ambulance;
import business.medicalEmployment.Doctor;
import business.network.Network;
import business.organization.AmbulanceOrganization;
import business.organization.DoctorOrganization;
import business.organization.EmergencyOrganization;
import business.organization.Organization;
import business.userAccount.UserAccount;
import business.workQueue.AmbulanceWorkRequest;
import business.workQueue.DoctorWorkRequest;
import business.workQueue.EmergencyPatientRequest;
import business.workQueue.WorkRequest;

import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sri_sai_nikhil_enni
 */
public class EmergencyPatientAdminWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form EmergencyPatientAdminWorkArea
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem system;
    Organization organization;
    Network network;
    UserAccount account;
    EmergencyPatientRequest emergencyPatientReq;
    EmergencyOrganization emergencyOrg; 
    public EmergencyPatientAdminWorkArea(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = business;
        this.organization = organization;
        this.network = network;
        this.account = account;
        
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyPatientRequest) {
               
                 emergencyPatientReq = (EmergencyPatientRequest)wr;
            }
        }
        
        populateTable();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) WorkRequestTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : organization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyPatientRequest) {
                
                    EmergencyPatientRequest epr = (EmergencyPatientRequest)wr;
                    if(epr.getAcceptedUser() == null || epr.getAcceptedUser().getUsername().equals(account.getUsername()))
                    {

                    Object[] row = new Object[model.getColumnCount()];
                    row[0] = epr;
                    row[1] = epr.getPatient().getPatientName();//epr.getSender().getEmployee().getName();
                    row[2] = epr.getPatient().getPatientName();
                    row[3] = epr.getPatient().getAddress();
                    row[4] = epr.getCriticality();
                    row[5] = epr.getStatus();// epr.getRequestdate();
                    row[6] = epr.getRequestDate();
                    row[7] = epr.getPatient().getPhoneNumber();
                    row[8] = epr.getEmergencyDoctor() != null ? epr.getEmergencyDoctor() : "" ;
                    row[9] = epr.getAmbulance();
                    model.addRow(row);
                    }
            }
            
        }
    
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkRequestTable = new javax.swing.JTable();
        btnAcknowledge = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        btnCompleteRequest = new javax.swing.JButton();
        btnAssigDoc = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblChildReq = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAmbulance = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRefreshTbl = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        WorkRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestId", "Sender", "Patient Name", "Patient Address", "Criticality", "Status", "Request Date", "Phone Number", "Doctor", "Ambulance"
            }
        ));
        WorkRequestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WorkRequestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(WorkRequestTable);

        btnAcknowledge.setText("Accept Request");
        btnAcknowledge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcknowledgeActionPerformed(evt);
            }
        });

        btnReject.setText("Reject Request");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnProcess.setText("Process Request");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnCompleteRequest.setText("Complete Request");
        btnCompleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteRequestActionPerformed(evt);
            }
        });

        btnAssigDoc.setText("Assign Doctor");
        btnAssigDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigDocActionPerformed(evt);
            }
        });

        tblChildReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestId", "Sender", "Patient Name", "Patient Address", "Criticality", "Status", "Request Date", "Phone Number", "Doctor", "Ambulance"
            }
        ));
        jScrollPane3.setViewportView(tblChildReq);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("EMERGENCY CHILD REQUEST");

        btnAmbulance.setText("Assigned Ambulance");
        btnAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbulanceActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnRefreshTbl.setText("Refresh");
        btnRefreshTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTblActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("EMERGENCY PATIENT ADMIN WORK AREA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(357, 357, 357)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRefreshTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAcknowledge)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnAmbulance)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnAssigDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnReject)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnProcess)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnCompleteRequest))
                                    .addComponent(jScrollPane1)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshTbl)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAcknowledge)
                    .addComponent(btnReject)
                    .addComponent(btnProcess)
                    .addComponent(btnCompleteRequest)
                    .addComponent(btnAssigDoc)
                    .addComponent(btnAmbulance))
                .addGap(59, 59, 59)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnClear)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcknowledgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcknowledgeActionPerformed
          int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            
            System.out.println(emerReq.getStatus());
            
            if(emerReq.getStatus().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStatus().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }else if(emerReq.getStatus().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }            
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStatus("Accepted");
                System.out.println("Accepted uSer" +account.getUsername() );
                emerReq.setAcceptedUser(account);
                emerReq.setMessage(msg);
                }
                populateTable();
            }
            //emerReq.setStatus("Accepted");
        }
    }//GEN-LAST:event_btnAcknowledgeActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
       int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStatus().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted and Processing");
            }else if(emerReq.getStatus().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }else if(emerReq.getStatus().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }             
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStatus("Rejected");
                emerReq.setMessage(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getAmbulance() == null || emerReq.getEmergencyDoctor() == null)
            {
                 JOptionPane.showMessageDialog(null, "Request is not yet Assigned to Doctor or Ambulance, So it can not be processed");
            }
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");     
                  if(msg != null)
                {
                emerReq.setStatus("Processing");
                emerReq.setMessage(msg);
                }
                populateTable();
            }            
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCompleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteRequestActionPerformed
        int count = WorkRequestTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            String childStatus = "";
         
            Organization doctorOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
        {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof DoctorOrganization ) {

                   doctorOrg = organization;
                   break;
               }
           }
        }
        for(Doctor doc : system.getDoctroDirectory().getDoctorList())
            {
               if(doc.getDocName().equals(emergencyPatientReq.getEmergencyDoctor().getDocName()))
               {
                   for(UserAccount ua : doctorOrg.getUserAccountDirectory().getUserAccountList())
                   {
                       if(ua.getEmployee().getName().equals(emergencyPatientReq.getEmergencyDoctor().getDocName()))
                       {
                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                if(wr instanceof DoctorWorkRequest) {

                                    DoctorWorkRequest epr = (DoctorWorkRequest)wr;
                                    childStatus = epr.getStatus();
                                }
                            }
                       }
                   }
               }
            }
            
         Organization ambulanceOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
         {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof AmbulanceOrganization ) {

                   ambulanceOrg = organization;
                   break;
               }
           }
        }
         
          for(Ambulance amb : system.getAmbulanceDirectory().getambulanceList())
            {
               if(amb.getAmbulanceNumber().equals(emergencyPatientReq.getAmbulance().getAmbulanceNumber()))
               {
                   for(UserAccount ua : ambulanceOrg.getUserAccountDirectory().getUserAccountList())
                   {
                       if(ua.getEmployee().getName().equals(emergencyPatientReq.getAmbulance().getDriverName()))
                       {
                            for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                if(wr instanceof AmbulanceWorkRequest) {

                                    AmbulanceWorkRequest epr = (AmbulanceWorkRequest)wr;
                                    childStatus = epr.getStatus();
                                }
                            }
                       }
                   }
                   
               }
            }
            
            
            System.out.println("Child Status" + childStatus);
//            if(childStatus.equals("Rejected")) {
//                JOptionPane.showMessageDialog(null, "Request is already Rejected");
//            }else if(childStatus.equals("Accepted")) {
//                JOptionPane.showMessageDialog(null, "Request should be in processing state before marking complete");
//            }else if(childStatus.equals("Completed")) {
//                JOptionPane.showMessageDialog(null, "Request is already Completed");
//            }else if(childStatus.equals("Cancelled")) {
//                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
//            }else if(childStatus.equals("Requested")) {
//                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
//            }else 
                if(!childStatus.equals("Completed")) {
                JOptionPane.showMessageDialog(null, "All the Request is not yet Completed");
            }else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setResolveDate(new Date());
                emerReq.setStatus("Completed");
                emerReq.setMessage(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnCompleteRequestActionPerformed

    private void btnAssigDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigDocActionPerformed
        // TODO add your handling code here:
        
         int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStatus().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }
            else {
                
                
               if(emergencyPatientReq.getEmergencyDoctor() == null)
               {
                   
                   Organization doctorOrg = null;
                     for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
                    {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                           if (organization instanceof DoctorOrganization ) {

                               doctorOrg = organization;
                               break;
                           }
                       }
                    }
                   
                    int size = system.getDoctroDirectory().getDoctorList().size();
                    String[] DoctorList = new String[size+1]; ;
                    int i= 0;
                    DoctorList[i] = "Select";
                    i++;
                    int availableCount = 0;
                    for(Doctor doctor : system.getDoctroDirectory().getDoctorList())
                    {
                        if(doctor.getEmergencyDoctor())
                        {
                            for(Doctor doc : system.getDoctroDirectory().getDoctorList())
                        {
                           if(doc.getDocName().equals(doctor.getDocName()))
                           {
                               for(UserAccount ua : doctorOrg.getUserAccountDirectory().getUserAccountList())
                               {
                                   if(ua.getEmployee().getName().equals(doctor.getDocName()))
                                   {
                                       for(WorkRequest wr : ua.getWorkQueue().getWorkRequestList())
                                       {
                                           if(wr instanceof  DoctorWorkRequest)
                                           {
                                               DoctorWorkRequest dwr = (DoctorWorkRequest)wr;
                                               {
                                                   if(!dwr.getStatus().equals("Completed"))
                                                   {
                                                       availableCount++;
                                                        DoctorList[i] = doctor.getDocName();
                                                        i++;
                                                       
                                                   }
                                                   else
                                                   {
                                                       // JOptionPane.showMessageDialog(null, "There is already request inprogress for this doctor");
                                                   }
                                               }
                                           }
                                       }
                                   }
                               }
                           }
                        }
                            
                            if(availableCount < 1)
                            {
                            DoctorList[i] = doctor.getDocName();
                            i++;
                            }
                        }
                    }
                        

                     final JComboBox<String> combo = new JComboBox<>(DoctorList);

                    String[] options = { "OK", "Cancel" };

                    String title = "Title";
                    int selection = JOptionPane.showOptionDialog(null, combo, title,
                          JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                          options, options[0]);

                    if (selection > 0) {
                       System.out.println("Doctor is: " + options[selection]);
                    }
                     

                    Object docterName = combo.getSelectedItem();
                    if(!docterName.equals("Select"))
                    {

                    for(Doctor doc : system.getDoctroDirectory().getDoctorList())
                        {
                           if(doc.getDocName().equals(docterName))
                           {
                               for(UserAccount ua : doctorOrg.getUserAccountDirectory().getUserAccountList())
                               {
                                   if(ua.getEmployee().getName().equals(docterName))
                                   {
                                       
                                       System.out.println(docterName + "Word Requet ");
                                       emergencyPatientReq.setEmergencyDoctor(doc);
                                       DoctorWorkRequest doctorwrkReq = new DoctorWorkRequest();
                                       doctorwrkReq.setPatient(emergencyPatientReq.getPatient());
                                       doctorwrkReq.setEmergencyDoctor(doc);
                                       doctorwrkReq.setRequestdate(new Date());
                                       doctorwrkReq.setSenderNetwork(network);
                                       doctorwrkReq.setSenderOrganization(organization);
                                       doctorwrkReq.setRecieverOrganization(doctorOrg);
                                       doctorwrkReq.setCriticality(emergencyPatientReq.getCriticality());
                                       doctorwrkReq.setStatus("Assigned Doctor");
                                       doctorwrkReq.setEmergencyPatientRequest(emergencyPatientReq);
                                       ua.getWorkQueue().addWorkRequest(doctorwrkReq);
                                   }
                               }
            //                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);

                           }
                        }

                    emergencyPatientReq.setStatus("Assigned Doctor");
                     populateTable();
                   }
                }
               else
               {
                    JOptionPane.showMessageDialog(null, "Request is already Assigned to Doctor");
               }
            }
        }
    }//GEN-LAST:event_btnAssigDocActionPerformed

    private void btnAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbulanceActionPerformed
        // TODO add your handling code here:
         int count = WorkRequestTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkRequestTable.getSelectedRow();
            EmergencyPatientRequest emerReq = (EmergencyPatientRequest) WorkRequestTable.getValueAt(selectedRow, 0);
            System.out.println(emerReq.getStatus());
            if(emerReq.getStatus().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStatus().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStatus().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStatus().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStatus().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStatus().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }
           else {
                
             if(emergencyPatientReq.getAmbulance() == null)
             {
                 

                
                int size = system.getAmbulanceDirectory().getambulanceList().size();
                String[] ambulanceList = new String[size+1]; ;
                int i= 0;
                ambulanceList[i] = "Select";
                i++;
                for(Ambulance ambulance : system.getAmbulanceDirectory().getambulanceList())
                {
                    ambulanceList[i] = String.valueOf(ambulance.getAmbulanceNumber());
                    i++;
                }

                 final JComboBox<String> combo = new JComboBox<>(ambulanceList);

                String[] options = { "OK", "Cancel" };

                String title = "Title";
                int selection = JOptionPane.showOptionDialog(null, combo, title,
                      JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                      options, options[0]);

                if (selection > 0) {
                   System.out.println("Ambulance is: " + options[selection]);
                }
                if(!options[selection].equals("Cancel"))
                {
                        Organization ambulanceOrg = null;
                        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
                       {
                           for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                              if (organization instanceof AmbulanceOrganization ) {

                                  ambulanceOrg = organization;
                                  break;
                              }
                          }
                       }

                       Object ambulanceName = combo.getSelectedItem();

                       for(Ambulance ambulance : system.getAmbulanceDirectory().getambulanceList())
                           {
                               System.out.println(ambulanceName + "Word Requet 1");
                              if(ambulance.getAmbulanceNumber().equals(ambulanceName))
                              {
                                    System.out.println(ambulanceName + "Word Requet 2");
                                  for(UserAccount ua : ambulanceOrg.getUserAccountDirectory().getUserAccountList())
                                  {
                                      if(ua.getEmployee().getName().equals(ambulance.getDriverName()))
                                      {
                                          System.out.println(ambulanceName + "Word Requet 3 ");
                                          //emergencyPatientReq.etEmergencyDoctor(doc);
                                          AmbulanceWorkRequest ambulancewrkReq = new AmbulanceWorkRequest();
                                          ambulancewrkReq.setPatient(emergencyPatientReq.getPatient());
                                          ambulancewrkReq.setEmergencyDoctor(emergencyPatientReq.getEmergencyDoctor());
                                          ambulancewrkReq.setRequestdate(new Date());
                                          ambulancewrkReq.setSenderNetwork(network);
                                          ambulancewrkReq.setSenderOrganization(organization);
                                          ambulancewrkReq.setRecieverOrganization(ambulanceOrg);
                                          ambulancewrkReq.setCriticality(emergencyPatientReq.getCriticality());
                                          ambulancewrkReq.setStatus("Ambulace Requested");
                                          emergencyPatientReq.setAmbulance(ambulance);
                                          ambulancewrkReq.setReceiver(ua);
                                          ambulancewrkReq.setAmbulance(ambulance);
                                          ambulancewrkReq.setEmergencyPatientRequest(emergencyPatientReq);
                                          ua.getWorkQueue().addWorkRequest(ambulancewrkReq);
                                            emergencyPatientReq.setStatus("Assigned Ambulance");
                                             populateTable();
                                          return;
                                      }
                                  }
               //                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);

                              }
                           }

                                  
                        }
                }
             else
             {
                  JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
             }
       }
      }
    }//GEN-LAST:event_btnAmbulanceActionPerformed

    private void WorkRequestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WorkRequestTableMouseClicked
        // TODO add your handling code here:
         int selectedReq = WorkRequestTable.getSelectedRow();
        if(selectedReq >= 0){
        EmergencyPatientRequest selectedWorkReq = (EmergencyPatientRequest)WorkRequestTable.getValueAt(selectedReq, 0);
        populateChildTable(selectedWorkReq);
        }
    }//GEN-LAST:event_WorkRequestTableMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tblChildReq.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRefreshTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTblActionPerformed
        // TODO add your handling code here:
         populateTable();
         DefaultTableModel model = (DefaultTableModel) tblChildReq.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnRefreshTblActionPerformed

    public void populateChildTable(EmergencyPatientRequest selectedWorkReq)
    {
        
         DefaultTableModel model = (DefaultTableModel) tblChildReq.getModel();
        model.setRowCount(0);
        Organization doctorOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
        {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof DoctorOrganization ) {

                   doctorOrg = organization;
                   break;
               }
           }
        }
        for(Doctor doc : system.getDoctroDirectory().getDoctorList())
            {
              if(selectedWorkReq.getEmergencyDoctor() != null)
               {
               if(doc.getDocName().equals(selectedWorkReq.getEmergencyDoctor().getDocName()))
               {
                   for(UserAccount ua : doctorOrg.getUserAccountDirectory().getUserAccountList())
                   {
                      
                            if(ua.getEmployee().getName().equals(selectedWorkReq.getEmergencyDoctor().getDocName()))
                            {
                                 for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                     if(wr instanceof DoctorWorkRequest) {

                                         DoctorWorkRequest epr = (DoctorWorkRequest)wr;
                                         System.out.println("EMergency Reque id for doc ="+epr.getEmergencyPatientRequest());
                                         if(epr.getEmergencyPatientRequest().equals(selectedWorkReq))
                                         {

                                            Object[] row = new Object[model.getColumnCount()];
                                            row[0] = epr;
                                            row[1] = epr.getPatient().getPatientName();//epr.getSender().getEmployee().getName();
                                            row[2] = epr.getPatient().getPatientName();
                                            row[3] = epr.getPatient().getAddress();
                                            row[4] = epr.getCriticality();
                                            row[5] = epr.getStatus();// epr.getRequestdate();
                                            row[6] = epr.getRequestDate();
                                            row[7] = epr.getPatient().getPhoneNumber();
                                            row[8] = epr.getEmergencyDoctor() != null ? epr.getEmergencyDoctor().getDocName() : "" ;
                                            //row[9] = epr.get.getAmbulance();
                                            model.addRow(row);
                                         }
                                     }

                                 }
                            }
                       
                   }
//                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);
               }  
               }
            }
        
        
         Organization ambulanceOrg = null;
         for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
        {
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof AmbulanceOrganization ) {

                   ambulanceOrg = organization;
                   break;
               }
           }
        }
         
          for(Ambulance amb : system.getAmbulanceDirectory().getambulanceList())
            {
                if(selectedWorkReq.getAmbulance() != null)
             {
               if(amb.getAmbulanceNumber().equals(selectedWorkReq.getAmbulance().getAmbulanceNumber()))
               {
                   for(UserAccount ua : ambulanceOrg.getUserAccountDirectory().getUserAccountList())
                   {
                       
                            if(ua.getEmployee().getName().equals(selectedWorkReq.getAmbulance().getDriverName()))
                            {
                                 for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
                                     if(wr instanceof AmbulanceWorkRequest) {

                                         AmbulanceWorkRequest epr = (AmbulanceWorkRequest)wr;
                                         
                                         if(epr.getEmergencyPatientRequest().equals(selectedWorkReq))
                                         {

                                            Object[] row = new Object[model.getColumnCount()];
                                            row[0] = epr;
                                            row[1] = epr.getPatient().getPatientName();//epr.getSender().getEmployee().getName();
                                            row[2] = epr.getPatient().getPatientName();
                                            row[3] = epr.getPatient().getAddress();
                                            row[4] = epr.getCriticality();
                                            row[5] = epr.getStatus();// epr.getRequestdate();
                                            row[6] = epr.getRequestDate();
                                            row[7] = epr.getPatient().getPhoneNumber();
                                            row[8] = "" ;
                                            row[9] = epr.getAmbulance() != null ? epr.getAmbulance().getAmbulanceNumber() : "";
                                            model.addRow(row);
                                         }
                                     }

                                 }

                            }
                      
                  }
               }
             }
            }
        
    }
      
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable WorkRequestTable;
    private javax.swing.JButton btnAcknowledge;
    private javax.swing.JButton btnAmbulance;
    private javax.swing.JButton btnAssigDoc;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCompleteRequest;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRefreshTbl;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblChildReq;
    // End of variables declaration//GEN-END:variables
}
